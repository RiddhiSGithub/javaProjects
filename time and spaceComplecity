Time complexity:-
-- Relation between input size and runtime opraton.
-- Three type of time complexity:
    * Best case
    * Average case
    * Worst case

--for example,
    best case:-
    in programing it says OMEGA (Ω(1))
    numbers={1,2,3,4,5,6}
    in this we want to find "1"
    in the firs operation we will find 1.
    --which is considered as best case senario.

    Average case:-
    in programing it saysTHITA (𝚯((N+1)/2))
    (1+2+3+....+n)/n or (n+1)/2 is the Average posibility
    what if numbers are not in order like,
    numbers={2,3,1,4,5}
    numbers={2,1,3,4,5}
    in this one, finding 1 is
        (1+2+3+4+5)/5=3 is Average cases

    Worst case:-
    in programing it says BIG O (O(N))
    always considerd of BIG O.
    n operation is Worst posibility.
    like, numbers={5,4,3,2,1}
    in this one finding one is,
        5 is the Worst case
--It follows the following order in case of time complexity: 

O(nn) > O(n!) > O(n3) > O(n2) > O(n.log(n)) > O(n.log(log(n))) > O(n) > O(sqrt(n)) > O(log(n)) > O(1) 

-------------------------------------------------------------------------
 
Space complexity:
--space compleity depends on how much memory occupied by code and that's depend on how many variabbles in this code.
--Space complexity of an algorithm quantifies the amount of time taken by a program to run as a function of length of the input.
--It is directly proportional to the largest memory your program acquires at any instance during run time. 
--For example: int consumes 4 bytes of memory.






    